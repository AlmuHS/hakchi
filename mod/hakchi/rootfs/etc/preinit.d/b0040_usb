disableUsbDevice(){
  #disable usb
  [ -f "/sys/devices/sunxi_usb/usb_role" ] || return 1
  echo 0 > "/sys/devices/sunxi_usb/usb_role"
}

switchToUsbDevice(){
  [ -f "/sys/devices/sunxi_usb/usb_role" ] || return 1
  disableUsbDevice
  # enable device mode
  echo 2 > "/sys/devices/sunxi_usb/usb_role"
  # make sure the usb gadgets are disabled
  echo 0 > "/sys/devices/virtual/android_usb/android0/enable"
}

switchToUsbHost(){
  [ -f "/sys/devices/sunxi_usb/usb_role" ] || return 1
  # make sure the usb gadgets are disabled
  [ -f "/sys/devices/virtual/android_usb/android0/enable" ] && \
  echo 0 > "/sys/devices/virtual/android_usb/android0/enable"
  disableUsbDevice
  # enable host mode
  echo 1 > "/sys/devices/sunxi_usb/usb_role"
}

getUsbStorageIds(){
  find "/dev/bus/usb" -type c | while read device
  do
    hexdump -n 1 -s 32 "$device" -C | grep -e '^00000020  08' && echo "$device"
  done
}

checkUsbStorage(){
  [ -z "$(getUsbStorageIds)" ] && return 1
  
  local disk="/dev/sda1"

  local timeout=5
  while [ $timeout -gt 0 ] && ! [ -b "$disk" ]; do
    echo "waiting for media $timeout"
    let timeout=timeout-1
    sleep 1
  done

  [ -b "$disk" ] || return 1

  local ro="defaults,nosuid,nodev,noatime,ro"
  local rw="defaults,nosuid,nodev,noatime,rw"
  mount -o $ro "$disk" "$mountpoint/media" || return 1

  local saves="$modname/saves"
  
  if [ -d "$mountpoint/media/$saves" ] || [ -d "$mountpoint/media/$modname/transfer" ] || [ "$cfg_usb_rw" == "y" ]; then
    umount "$mountpoint/media"
    mount -o $rw "$disk" "$mountpoint/media" || return 1
  fi
  [ -d "$mountpoint/media/$saves" ] && mount_bind "$mountpoint/media/$saves" "$mountpoint$profilepath"

  local bootlogo0="boot.png"
  local bootlogo1="$mountpoint/media/$modname/$bootlogo0"
  local bootlogo2="$rootfs/etc/$bootlogo0"
  if [ -f "$bootlogo1" ]; then
    rsync -ac "$bootlogo1" "$bootlogo2"
    showImage "$bootlogo2"
    cfg_boot_logo=''
  else
    [ -f "$bootlogo2" ] && rm -f "$bootlogo2" && source "$preinit.d/p7010_bootlogo"
  fi

  local bootsound0="boot.wav"
  local bootsound1="$mountpoint/media/$modname/$bootsound0"
  local bootsound2="$rootfs/etc/$bootsound0"
  if [ -f "$bootsound1" ]; then
    [ -f "$bootsound2" ] || playSound "$bootsound1"
    rsync -ac "$bootsound1" "$bootsound2"
  else
    rm -f "$bootsound2"
  fi

  return 0
}

checkUsbGamepath(){
  local disk="/dev/sda1"
  [ -b "$disk" ] || return 1

  local games="$modname/games"
  local gameSource="$mountpoint/media/$games"
  local gameStorage="$installpath/games"
  if [ -d "$gameSource" ]; then
    if ! mkdir -p "$gameStorage"; then
      rm -rf "$gameStorage"
      mkdir -p "$gameStorage" || return 1
    fi
    mount_bind "$gameSource" "$gameStorage"
    return 0
  else
    echo "no romz found at: $disk:/$games"
    return 1
  fi
}
